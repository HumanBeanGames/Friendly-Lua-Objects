NDSummary.OnToolTipsLoaded("CSharpClass:MoonSharp.Interpreter.ScriptOptions",{3892:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3892\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public</span></div><div class=\"CPName\"><span class=\"Qualifier\">MoonSharp.&#8203;Interpreter.</span>&#8203;ScriptOptions</div></div></div><div class=\"TTSummary\">This class contains options to customize behaviour of Script objects.</div></div>",3894:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3894\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">internal</span> ScriptOptions()</div></div></div>",3895:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3895\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">internal</span> ScriptOptions(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">ScriptOptions&nbsp;</td><td class=\"PName last\">defaults</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",3897:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3897\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> IScriptLoader ScriptLoader { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets the current script-loader.</div></div>",3898:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3898\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> Action&lt;<span class=\"SHKeyword\">string</span>&gt; DebugPrint { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets the debug print handler</div></div>",3899:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3899\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> Func&lt;<span class=\"SHKeyword\">string</span>, <span class=\"SHKeyword\">string</span>&gt; DebugInput { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets the debug input handler (takes a prompt as an input, for interactive interpreters, like debug.debug).</div></div>",3900:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3900\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> UseLuaErrorLocations { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets a value indicating whether error messages will use Lua error locations instead of MoonSharp improved ones. Use this for compatibility with legacy Lua code which parses error messages.</div></div>",3901:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3901\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> ColonOperatorBehaviour ColonOperatorClrCallbackBehaviour { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets a value which dictates the behaviour of the colon (\':\') operator in callbacks to CLR code.</div></div>",3902:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3902\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> Stream Stdin { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets the stream used as stdin. If null, a default stream is used.</div></div>",3903:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3903\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> Stream Stdout { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets the stream used as stdout. If null, a default stream is used.</div></div>",3904:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3904\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public</span> Stream Stderr { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets the stream used as stderr. If null, a default stream is used.</div></div>",3905:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3905\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public int</span> TailCallOptimizationThreshold { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets the stack depth threshold at which MoonSharp starts doing tail call optimizations.&nbsp; TCOs can provide the little benefit of avoiding stack overflows in corner case scenarios, at the expense of losing debug information and error stack traces in all other, more common scenarios. MoonSharp choice is to start performing TCOs only after a certain threshold of stack usage is reached - by default half the current stack depth (128K entries), thus 64K entries, on either the internal stacks.&nbsp; Set this to int.MaxValue to disable TCOs entirely, or to 0 to always have TCOs enabled.</div></div>",3906:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3906\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public bool</span> CheckThreadAccess { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets a value indicating whether the thread check is enabled.&nbsp; A &quot;lazy&quot; thread check is performed everytime execution is entered to ensure that no two threads calls MoonSharp execution concurrently. However 1) the check is performed best effort (thus, it might not detect all issues) and 2) it might trigger in very odd legal situations (like, switching threads inside a CLR-callback without actually having concurrency.&nbsp; Disable this option if the thread check is giving problems in your scenario, but please check that you are not calling MoonSharp execution concurrently as it is not supported.</div></div>"});