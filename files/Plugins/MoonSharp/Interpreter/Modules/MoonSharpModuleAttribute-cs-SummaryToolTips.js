NDSummary.OnToolTipsLoaded("File:Plugins/MoonSharp/Interpreter/Modules/MoonSharpModuleAttribute.cs",{3245:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3245\"><div class=\"CPEntry TClass Current\"><div class=\"CPPrePrototypeLine\"><span class=\"SHMetadata\">[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]</span></div><div class=\"CPModifiers\"><span class=\"SHKeyword\">public sealed</span></div><div class=\"CPName\"><span class=\"Qualifier\">MoonSharp.&#8203;Interpreter.</span>&#8203;MoonSharpModuleAttribute</div></div></div><div class=\"TTSummary\">Marks a CLR type to be a MoonSharp module.&nbsp; Modules are the fastest way to bring interop between scripts and CLR code, albeit at the cost of a very increased complexity in writing them. Modules is what\'s used for the standard library, for maximum efficiency.&nbsp; Modules are basically classes containing only static methods, with the callback function signature.&nbsp; See Table and ModuleRegister for (extension) methods used to register modules to a table.&nbsp; See CallbackFunction for information regarding the standard callback signature along with easier ways to marshal methods.&nbsp; See UserData for easier object marshalling.</div></div>",3247:"<div class=\"NDToolTip TProperty LCSharp\"><div id=\"NDPrototype3247\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">public string</span> Namespace { <span class=\"SHKeyword\">get</span>; <span class=\"SHKeyword\">set</span> }</div></div><div class=\"TTSummary\">Gets or sets the namespace, that is the name of the table which will contain the defined functions.&nbsp; Can be null to be in the global table.</div></div>"});