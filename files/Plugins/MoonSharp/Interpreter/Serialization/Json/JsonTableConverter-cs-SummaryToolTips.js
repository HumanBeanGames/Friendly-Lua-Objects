NDSummary.OnToolTipsLoaded("File:Plugins/MoonSharp/Interpreter/Serialization/Json/JsonTableConverter.cs",{3411:"<div class=\"NDToolTip TClass LCSharp\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype3411\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">public static</span></div><div class=\"CPName\"><span class=\"Qualifier\">MoonSharp.&#8203;Interpreter.&#8203;Serialization.&#8203;Json.</span>&#8203;JsonTableConverter</div></div></div><div class=\"TTSummary\">Class performing conversions between Tables and Json.&nbsp; NOTE : the conversions are done respecting json syntax but using Lua constructs. This means mostly that: 1) Lua string escapes can be accepted while they are not technically valid JSON, and viceversa 2) Null values are represented using a static userdata of type JsonNull 3) Do not use it when input cannot be entirely trusted</div></div>",3413:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3413\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static string</span> TableToJson(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">this</span>&nbsp;</td><td class=\"PType\">Table&nbsp;</td><td class=\"PName last\">table</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Converts a table to a json string</div></div>",3414:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3414\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static void</span> TableToJson(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">StringBuilder&nbsp;</td><td class=\"PName last\">sb,</td></tr><tr><td class=\"PType first\">Table&nbsp;</td><td class=\"PName last\">table</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Tables to json.</div></div>",3415:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3415\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static string</span> ObjectToJson(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">object</span>&nbsp;</td><td class=\"PName last\">obj</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Converts a generic object to JSON</div></div>",3416:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3416\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static void</span> ValueToJson(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">StringBuilder&nbsp;</td><td class=\"PName last\">sb,</td></tr><tr><td class=\"PType first\">DynValue&nbsp;</td><td class=\"PName last\">value</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",3417:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3417\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static string</span> EscapeString(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">s</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",3418:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3418\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static bool</span> IsValueJsonCompatible(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">DynValue&nbsp;</td><td class=\"PName last\">value</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",3419:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3419\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">public static</span> Table JsonToTable(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">json,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PType first\">Script&nbsp;</td><td class=\"PName\">script</td><td class=\"PDefaultValueSeparator\">&nbsp;=&nbsp;</td><td class=\"PDefaultValue last\"> <span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Converts a json string to a table</div></div>",3420:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3420\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static void</span> AssertToken(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Lexer&nbsp;</td><td class=\"PName last\">L,</td></tr><tr><td class=\"PType first\">TokenType&nbsp;</td><td class=\"PName last\">type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",3421:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3421\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static</span> Table ParseJsonArray(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Lexer&nbsp;</td><td class=\"PName last\">L,</td></tr><tr><td class=\"PType first\">Script&nbsp;</td><td class=\"PName last\">script</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",3422:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3422\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static</span> Table ParseJsonObject(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Lexer&nbsp;</td><td class=\"PName last\">L,</td></tr><tr><td class=\"PType first\">Script&nbsp;</td><td class=\"PName last\">script</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>",3423:"<div class=\"NDToolTip TFunction LCSharp\"><div id=\"NDPrototype3423\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">private static</span> DynValue ParseJsonValue(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">Lexer&nbsp;</td><td class=\"PName last\">L,</td></tr><tr><td class=\"PType first\">Script&nbsp;</td><td class=\"PName last\">script</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div></div>"});